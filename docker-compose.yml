services:

  # sharedlibrary:
  #   build:
  #     context: ./SharedLibrary
  #     dockerfile: sharedlibrary.Dockerfile
  #   volumes:
  #     - shared-output:/app/publish

  frontend:
    image: frontend-image
    build:
      context: .
      dockerfile: Frontend/frontend.Dockerfile
    env_file:
      - .env
    ports:
      - "7000:7000"
    volumes:
      - shared-output:/app/shared 
    environment:
      - Configuration=Docker
    depends_on:
      - mongodb
      - backendpatient
      - apigateway
    networks:
      - elastic

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/apigateway.Dockerfile
    env_file:
      - .env
    environment:
      - Configuration=Docker
    ports:
      - "5000:5000"

  auth:
    build:
      context: .
      dockerfile: Auth/auth.Dockerfile
    env_file:
      - .env
    environment:
      - Configuration=Docker
    ports:
      - "7201:7201"

  backendpatient:
    build:
      context: .
      dockerfile: BackendPatient/backendpatient.Dockerfile
    env_file:
      - .env
    environment:
      - Configuration=Docker
    ports:
      - "7200:7200"

  backendnote:
    build:
      context: .
      dockerfile: BackendNote/backendnote.Dockerfile
    env_file:
      - .env
    depends_on:
      - mongodb
    environment:
      - Configuration=Docker
    ports:
      - "7202:7202"

  backenddiabetesriskprediction:
    build:
      context: .
      dockerfile: BackendDiabetesRiskPrediction/backenddiabetesriskprediction.Dockerfile
    env_file:
      - .env
    depends_on:
      - restore
      - elasticsearch
      - mongodb
    environment:
      - Configuration=Docker
    ports:
      - "7204:7204"

  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elastic
  
  restore:
    build:
      context: ./mongodb
      dockerfile: mongodb.Dockerfile
    volumes:
      - ./mongodb/backup:/backup
    environment:
      - MONGO_HOST=mongodb_container
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - elastic
    
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    container_name: elasticsearch_container
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_config:/usr/share/elasticsearch/config
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cat/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - elastic

  logstash:
    build:
      context: ./logstash
      dockerfile: logstash.Dockerfile
    container_name: logstash_container
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - elastic

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    
    build:
      context: ./mongodb
      dockerfile: mongo-express.Dockerfile
    volumes:
      - ./mongodb:/mongodb
    ports:
      - "8081:8081"
    environment:
      # - ME_CONFIG_MONGODB_SERVER=mongodb_container
      - ME_CONFIG_MONGODB_URL=mongodb://mongodb_container:27017
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - elastic
    command: ["sh", "/mongodb/wait-for-mongo.sh", "/docker-entrypoint.sh"]

volumes:
  mongo_data:
    driver: local
  elasticsearch_config:
    driver: local
  elasticsearch_data:
    driver: local
  shared-output:


networks:
  elastic:
    driver: bridge
