services:

  mongodb:
    container_name: mongodb_container
    image: mongo:8.0.3
    ports:
      - "27017:27017"
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 5s
      timeout: 10s
      retries: 5
    volumes:
      - mongo_data:/data/db
    networks:
      - elastic

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    container_name: elasticsearch_container
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_config:/usr/share/elasticsearch/config
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/notes_index_template.json:/usr/share/elasticsearch/config/notes_index_template.json
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cat/health" ]
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
    networks:
      - elastic
    mem_limit: 2g

  init-template:
    image: curlimages/curl:8.11.0 
    container_name: init-template
    depends_on:
      - elasticsearch
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for Elasticsearch to be ready...';
      until curl -s http://elasticsearch:9200/_cat/health > /dev/null; do
        sleep 5;
      done;
      echo 'Elasticsearch is ready. Loading index template...';
      curl -X PUT 'http://elasticsearch:9200/_index_template/notes_index_template' \
      -H 'Content-Type: application/json' \
      -d @/usr/share/elasticsearch/config/notes_index_template.json;
      echo 'Template loaded successfully!';"
    volumes:
      - ./elasticsearch/config/notes_index_template.json:/usr/share/elasticsearch/config/notes_index_template.json
    networks:
      - elastic

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    build:
      context: ./mongodb
      dockerfile: mongo-express.Dockerfile
    volumes:
      - ./mongodb:/mongodb
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://mongodb_container:27017
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - elastic

  apigateway:
    container_name: apigateway
    build:
      context: .
      dockerfile: ApiGateway/apigateway.Dockerfile
    env_file:
      - .env
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:5000
    ports:
      - "5000:5000"
    networks:
      - elastic

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: Auth/auth.Dockerfile
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:7201
      - ConnectionStrings__DockerInternal=Server=host.docker.internal,1433;Database=AuthServiceDb;User Id=${DB_USER};Password=${DB_PASSWORD};MultipleActiveResultSets=true;TrustServerCertificate=True;
    volumes:
      - data_protection_keys:/root/.aspnet/DataProtection-Keys
    ports:
      - "7201:7201"
    networks:
      - elastic

  backendpatient:
    container_name: backendpatient
    build:
      context: .
      dockerfile: BackendPatient/backendpatient.Dockerfile
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:7200
      - ConnectionStrings__DockerInternal=Server=host.docker.internal,1433;Database=PatientDb;User Id=${DB_USER};Password=${DB_PASSWORD};MultipleActiveResultSets=true;TrustServerCertificate=True;
    volumes:
      - data_protection_keys:/root/.aspnet/DataProtection-Keys
    ports:
      - "7200:7200"
    networks:
      - elastic

  backendnote:
    container_name: backendnote
    build:
      context: .
      dockerfile: BackendNote/backendnote.Dockerfile
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:7202
    ports:
      - "7202:7202"
    networks:
      - elastic

  backenddiabetesriskprediction:
    container_name: backenddiabetesriskprediction
    build:
      context: .
      dockerfile: BackendDiabetesRiskPrediction/backenddiabetesriskprediction.Dockerfile
    env_file:
      - .env
    depends_on:
      - elasticsearch
      - mongodb
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:7204
    ports:
      - "7204:7204"
    networks:
      - elastic

  frontend:
    image: frontend-image
    container_name: frontend
    build:
      context: .
      dockerfile: Frontend/frontend.Dockerfile
    env_file:
      - .env
    ports:
      - "7000:7000"
    volumes:
      - shared-output:/app/shared
      - ./Frontend/Views/:/app/Views/
    environment:
      - Configuration=Docker
      - ASPNETCORE_URLS=http://*:7000
    depends_on:
      - backendpatient
      - apigateway
    networks:
      - elastic

volumes:
  mongo_data:
    driver: local
  elasticsearch_config:
    driver: local
  elasticsearch_data:
    driver: local
  shared-output:
  data_protection_keys:

networks:
  elastic:
    driver: bridge

